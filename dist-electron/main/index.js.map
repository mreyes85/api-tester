{"version":3,"file":"index.js","sources":["../../electron/main/index.ts"],"sourcesContent":["import { app, BrowserWindow, shell, ipcMain, session } from 'electron'\r\nimport { fileURLToPath } from 'node:url'\r\nimport path from 'node:path'\r\nimport os from 'node:os'\r\n\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\r\n\r\n// The built directory structure\r\n//\r\n// ├─┬ dist-electron\r\n// │ ├─┬ main\r\n// │ │ └── index.js    > Electron-Main\r\n// │ └─┬ preload\r\n// │   └── index.mjs   > Preload-Scripts\r\n// ├─┬ dist\r\n// │ └── index.html    > Electron-Renderer\r\n//\r\nprocess.env.APP_ROOT = path.join(__dirname, '../..')\r\n\r\nexport const MAIN_DIST = path.join(process.env.APP_ROOT, 'dist-electron')\r\nexport const RENDERER_DIST = path.join(process.env.APP_ROOT, 'dist')\r\nexport const VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL\r\n\r\nprocess.env.VITE_PUBLIC = VITE_DEV_SERVER_URL\r\n  ? path.join(process.env.APP_ROOT, 'public')\r\n  : RENDERER_DIST\r\n\r\n// Disable GPU Acceleration for Windows 7\r\nif (os.release().startsWith('6.1')) app.disableHardwareAcceleration()\r\n\r\n// Set application name for Windows 10+ notifications\r\nif (process.platform === 'win32') app.setAppUserModelId(app.getName())\r\n\r\nif (!app.requestSingleInstanceLock()) {\r\n  app.quit()\r\n  process.exit(0)\r\n}\r\n\r\nlet win: BrowserWindow | null = null\r\nconst preload = path.join(__dirname, '../preload/index.mjs')\r\nconst indexHtml = path.join(RENDERER_DIST, 'index.html')\r\n\r\nasync function createWindow() {\r\n  win = new BrowserWindow({\r\n    title: 'Main window',\r\n    icon: path.join(process.env.VITE_PUBLIC, 'favicon.ico'),\r\n    webPreferences: {\r\n      preload,\r\n      // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\r\n      // nodeIntegration: true,\r\n\r\n      // Consider using contextBridge.exposeInMainWorld\r\n      // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\r\n      // contextIsolation: false,\r\n    },\r\n  })\r\n\r\n  if (VITE_DEV_SERVER_URL) { // #298\r\n    win.loadURL(VITE_DEV_SERVER_URL)\r\n    // Open devTool if the app is not packaged\r\n    win.webContents.openDevTools()\r\n  } else {\r\n    win.loadFile(indexHtml)\r\n  }\r\n\r\n  // Test actively push message to the Electron-Renderer\r\n  win.webContents.on('did-finish-load', () => {\r\n    win?.webContents.send('main-process-message', new Date().toLocaleString())\r\n  })\r\n\r\n  // Make all links open with the browser, not with the application\r\n  win.webContents.setWindowOpenHandler(({ url }) => {\r\n    if (url.startsWith('https:')) shell.openExternal(url)\r\n    return { action: 'deny' }\r\n  })\r\n  // win.webContents.on('will-navigate', (event, url) => { }) #344\r\n\r\n  // Make CSP HTTP Header\r\n  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {\r\n    callback({\r\n      responseHeaders: {\r\n        ...details.responseHeaders,\r\n        'Content-Security-Policy': [`script-src 'self' ${import.meta.env.APP_DEV_SERVER_URL}`]\r\n      }\r\n    })\r\n  })  \r\n}\r\n\r\napp.whenReady().then(createWindow)\r\n\r\napp.on('window-all-closed', () => {\r\n  win = null\r\n  if (process.platform !== 'darwin') app.quit()\r\n})\r\n\r\napp.on('second-instance', () => {\r\n  if (win) {\r\n    // Focus on the main window if the user tried to open another\r\n    if (win.isMinimized()) win.restore()\r\n    win.focus()\r\n  }\r\n})\r\n\r\napp.on('activate', () => {\r\n  const allWindows = BrowserWindow.getAllWindows()\r\n  if (allWindows.length) {\r\n    allWindows[0].focus()\r\n  } else {\r\n    createWindow()\r\n  }\r\n})\r\n\r\n// New window example arg: new windows url\r\nipcMain.handle('open-win', (_, arg) => {\r\n  const childWindow = new BrowserWindow({\r\n    webPreferences: {\r\n      preload,\r\n      nodeIntegration: true,\r\n      contextIsolation: false,\r\n    },\r\n  })\r\n\r\n  if (VITE_DEV_SERVER_URL) {\r\n    childWindow.loadURL(`${VITE_DEV_SERVER_URL}#${arg}`)\r\n  } else {\r\n    childWindow.loadFile(indexHtml, { hash: arg })\r\n  }\r\n})"],"names":[],"mappings":";;;;AAKA,MAAM,YAAY,KAAK,QAAQ,cAAc,YAAY,GAAG,CAAC;AAY7D,QAAA,IAAY,WAAW,KAAK,KAAK,WAAW,OAAO;AAE5C,MAAM,YAAY,KAAK,KAAK,QAAA,IAAY,UAAU,eAAe;AACjE,MAAM,gBAAgB,KAAK,KAAK,QAAA,IAAY,UAAU,MAAM;AACtD,MAAA,sBAAsB,QAAY,IAAA;AAE/C,QAAA,IAAY,cAAc,sBACtB,KAAK,KAAK,QAAY,IAAA,UAAU,QAAQ,IACxC;AAGJ,IAAI,GAAG,QAAA,EAAU,WAAW,KAAK;AAAG,MAAI,4BAA4B;AAGpE,IAAI,QAAQ,aAAa;AAAa,MAAA,kBAAkB,IAAI,QAAS,CAAA;AAErE,IAAI,CAAC,IAAI,6BAA6B;AACpC,MAAI,KAAK;AACT,UAAQ,KAAK,CAAC;AAChB;AAEA,IAAI,MAA4B;AAChC,MAAM,UAAU,KAAK,KAAK,WAAW,sBAAsB;AAC3D,MAAM,YAAY,KAAK,KAAK,eAAe,YAAY;AAEvD,eAAe,eAAe;AAC5B,QAAM,IAAI,cAAc;AAAA,IACtB,OAAO;AAAA,IACP,MAAM,KAAK,KAAK,QAAA,IAAY,aAAa,aAAa;AAAA,IACtD,gBAAgB;AAAA,MACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOF;AAAA,EAAA,CACD;AAED,MAAI,qBAAqB;AACvB,QAAI,QAAQ,mBAAmB;AAE/B,QAAI,YAAY;EAAa,OACxB;AACL,QAAI,SAAS,SAAS;AAAA,EACxB;AAGI,MAAA,YAAY,GAAG,mBAAmB,MAAM;AAC1C,+BAAK,YAAY,KAAK,6CAA4B,KAAK,GAAE;EAAgB,CAC1E;AAGD,MAAI,YAAY,qBAAqB,CAAC,EAAE,UAAU;AAC5C,QAAA,IAAI,WAAW,QAAQ;AAAG,YAAM,aAAa,GAAG;AAC7C,WAAA,EAAE,QAAQ;EAAO,CACzB;AAID,UAAQ,eAAe,WAAW,kBAAkB,CAAC,SAAS,aAAa;AAChE,aAAA;AAAA,MACP,iBAAiB;AAAA,QACf,GAAG,QAAQ;AAAA,QACX,2BAA2B,CAAC,qBAAqB,wBAAkC,EAAE;AAAA,MACvF;AAAA,IAAA,CACD;AAAA,EAAA,CACF;AACH;AAEA,IAAI,UAAY,EAAA,KAAK,YAAY;AAEjC,IAAI,GAAG,qBAAqB,MAAM;AAC1B,QAAA;AACN,MAAI,QAAQ,aAAa;AAAU,QAAI,KAAK;AAC9C,CAAC;AAED,IAAI,GAAG,mBAAmB,MAAM;AAC9B,MAAI,KAAK;AAEP,QAAI,IAAI,YAAY;AAAG,UAAI,QAAQ;AACnC,QAAI,MAAM;AAAA,EACZ;AACF,CAAC;AAED,IAAI,GAAG,YAAY,MAAM;AACjB,QAAA,aAAa,cAAc;AACjC,MAAI,WAAW,QAAQ;AACV,eAAA,CAAC,EAAE;EAAM,OACf;AACQ;EACf;AACF,CAAC;AAGD,QAAQ,OAAO,YAAY,CAAC,GAAG,QAAQ;AAC/B,QAAA,cAAc,IAAI,cAAc;AAAA,IACpC,gBAAgB;AAAA,MACd;AAAA,MACA,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IACpB;AAAA,EAAA,CACD;AAED,MAAI,qBAAqB;AACvB,gBAAY,QAAQ,GAAG,mBAAmB,IAAI,GAAG,EAAE;AAAA,EAAA,OAC9C;AACL,gBAAY,SAAS,WAAW,EAAE,MAAM,IAAK,CAAA;AAAA,EAC/C;AACF,CAAC;"}